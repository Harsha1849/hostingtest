generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  address       String?
  bio           String?   @db.Text
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  favorites     Favorite[]
  properties    Property[]
  contactRequests ContactRequest[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id          String     @id @default(cuid())
  title       String
  description String     @db.Text
  price       Float
  bedrooms    Int
  bathrooms   Int
  area        Float
  address     String
  city        String
  state       String
  zipCode     String
  images      String[]
  features    String[]
  status      String     @default("available") // available, sold, pending
  type        String     // house, apartment, condo, etc.
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites   Favorite[]
  contactRequests ContactRequest[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  user       User     @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([userId, propertyId])
}

model ContactRequest {
  id            String   @id @default(cuid())
  propertyId    String
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  name          String
  email         String
  phone         String
  message       String?  @db.Text
  preferredDate DateTime
  preferredTime String
  status        String   @default("PENDING")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
} 
} 